// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(CUSTOMER)
  hotels    Hotel[]  @relation("HotelOwner")
  bookings  Booking[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  HOTEL_OWNER
  CUSTOMER
}

model Hotel {
  id          String   @id @default(uuid())
  name        String
  description String
  location    String
  status      HotelStatus @default(PENDING)
  amenities   String[]
  photos      String[]
  owner       User     @relation("HotelOwner", fields: [ownerId], references: [id])
  ownerId     String
  rooms       Room[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum HotelStatus {
  APPROVED
  PENDING
  REJECTED
}

model Room {
  id           String   @id @default(uuid())
  hotel        Hotel    @relation(fields: [hotelId], references: [id])
  hotelId      String
  type         RoomType
  price        Float
  beds         Int
  photos       String[]
  availableFrom DateTime
  availableTo   DateTime
  bookings     Booking[]
}

enum RoomType {
  SINGLE
  DOUBLE
  DELUXE
  SUITE
}

model Booking {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  room       Room     @relation(fields: [roomId], references: [id])
  roomId     String
  fromDate   DateTime
  toDate     DateTime
  totalPrice Float
  status     BookingStatus @default(BOOKED)
  payment    Payment?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum BookingStatus {
  BOOKED
  CANCELLED
}

model Payment {
  id         String   @id @default(uuid())
  booking    Booking  @relation(fields: [bookingId], references: [id])
  bookingId  String   @unique
  amount     Float
  method     String
  status     PaymentStatus @default(PENDING)
  createdAt  DateTime @default(now())
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}